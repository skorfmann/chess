var search_data = {"index":{"searchIndex":["chess","board","pieces","bishop","king","knight","pawn","piece","queen","rook","black?()","move_piece()","new()","new()","piece_at()","piece_at?()","remove_piece_at()","reset_board()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","white?()","readme"],"longSearchIndex":["chess","chess::board","chess::pieces","chess::pieces::bishop","chess::pieces::king","chess::pieces::knight","chess::pieces::pawn","chess::pieces::piece","chess::pieces::queen","chess::pieces::rook","chess::pieces::piece#black?()","chess::board#move_piece()","chess::board::new()","chess::pieces::piece::new()","chess::board#piece_at()","chess::board#piece_at?()","chess::board#remove_piece_at()","chess::board#reset_board()","chess::board#to_s()","chess::pieces::bishop#to_s()","chess::pieces::king#to_s()","chess::pieces::knight#to_s()","chess::pieces::pawn#to_s()","chess::pieces::queen#to_s()","chess::pieces::rook#to_s()","chess::pieces::piece#white?()",""],"info":[["Chess","","Chess.html","",""],["Chess::Board","","Chess/Board.html","","<p>This class represents a chess board and comes with an api to handle the\nstate of a game by querying, …\n"],["Chess::Pieces","","Chess/Pieces.html","",""],["Chess::Pieces::Bishop","","Chess/Pieces/Bishop.html","",""],["Chess::Pieces::King","","Chess/Pieces/King.html","",""],["Chess::Pieces::Knight","","Chess/Pieces/Knight.html","",""],["Chess::Pieces::Pawn","","Chess/Pieces/Pawn.html","",""],["Chess::Pieces::Piece","","Chess/Pieces/Piece.html","",""],["Chess::Pieces::Queen","","Chess/Pieces/Queen.html","",""],["Chess::Pieces::Rook","","Chess/Pieces/Rook.html","",""],["black?","Chess::Pieces::Piece","Chess/Pieces/Piece.html#method-i-black-3F","()",""],["move_piece","Chess::Board","Chess/Board.html#method-i-move_piece","(from, to)","<p>Moving a piece from one position to another. When a piece is present on the\nnew position, the piece will …\n"],["new","Chess::Board","Chess/Board.html#method-c-new","()",""],["new","Chess::Pieces::Piece","Chess/Pieces/Piece.html#method-c-new","(color)",""],["piece_at","Chess::Board","Chess/Board.html#method-i-piece_at","(position)","<p>Returns the piece located at specified position or nil, if the position is\nblank.\n<p>Raises an ArgumentError …\n"],["piece_at?","Chess::Board","Chess/Board.html#method-i-piece_at-3F","(position)","<p>Query a specified position if a any piece is present.Returns true or false.\n<p>Raises an ArgumentError when …\n"],["remove_piece_at","Chess::Board","Chess/Board.html#method-i-remove_piece_at","(position)","<p>Removes a piece from the specified position and returns the piece or nil,\nif the specfied position is …\n"],["reset_board","Chess::Board","Chess/Board.html#method-i-reset_board","()","<p>Reset the board for a new game.\n"],["to_s","Chess::Board","Chess/Board.html#method-i-to_s","()","<p>Print the state of the board as ASCII-Art\n"],["to_s","Chess::Pieces::Bishop","Chess/Pieces/Bishop.html#method-i-to_s","()",""],["to_s","Chess::Pieces::King","Chess/Pieces/King.html#method-i-to_s","()",""],["to_s","Chess::Pieces::Knight","Chess/Pieces/Knight.html#method-i-to_s","()",""],["to_s","Chess::Pieces::Pawn","Chess/Pieces/Pawn.html#method-i-to_s","()",""],["to_s","Chess::Pieces::Queen","Chess/Pieces/Queen.html#method-i-to_s","()",""],["to_s","Chess::Pieces::Rook","Chess/Pieces/Rook.html#method-i-to_s","()",""],["white?","Chess::Pieces::Piece","Chess/Pieces/Piece.html#method-i-white-3F","()",""],["README","","README_rdoc.html","","<p># Representing a Chess Board\n<p>## System Requirements\n<p>The implemented system shall provide the following …\n"]]}}